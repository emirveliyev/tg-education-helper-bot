import os
import logging
from datetime import datetime
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

from core.bot import bot, dp
from states.states import States
from database.database_manager import DatabaseManager
from api.gemini_api import GeminiAPI
from api.image_generator import ImageGenerator
from api.document_generator import DocumentGenerator
from managers.keyboard_manager import KeyboardManager
from managers.progress_manager import ProgressManager
from utils.utils import user_exports, safe_state_transaction
from config.config import DATA_DIR

logger = logging.getLogger("tg-edu-bot")

def register_gen_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(cb_start_gen, lambda c: c.data == "start_gen_cb")
    dp.register_message_handler(subject_handler, state=States.subject)
    dp.register_message_handler(topic_handler, state=States.topic)
    dp.register_message_handler(grade_handler, state=States.grade)
    dp.register_callback_query_handler(count_selected, lambda c: c.data and c.data.startswith("count:"), state=States.count)
    dp.register_callback_query_handler(lang_selected, lambda c: c.data.startswith("lang:"), state=States.language)
    dp.register_callback_query_handler(qtype_selected, lambda c: c.data.startswith("qtype:"), state=States.qtype)
    dp.register_callback_query_handler(confirm_gen, lambda c: c.data == "confirm_gen_cb", state="*")
    dp.register_callback_query_handler(cb_export_word, lambda c: c.data and c.data.startswith("export_word:"))

async def cb_start_gen(query: types.CallbackQuery):
    await query.answer()

    user = DatabaseManager.get_user(query.from_user.id)
    if not user or not user.get("accepted"):
        await bot.send_message(
            query.from_user.id,
            "üö´ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
            reply_markup=KeyboardManager.get_main_kb(False)
        )
        return

    await bot.send_message(
        query.from_user.id,
        "–®–∞–≥ 1 –∏–∑ 6: –£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–ë–∏–æ–ª–æ–≥–∏—è'). –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=KeyboardManager.get_cancel_kb()
    )
    await States.subject.set()

async def subject_handler(message: types.Message, state: FSMContext):
    text = GeminiAPI.sanitize_text(message.text)

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        user_accepted = bool(DatabaseManager.get_user(message.from_user.id))
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=KeyboardManager.get_main_kb(user_accepted))
        return

    await state.update_data(subject=text)
    await message.answer(
        "–®–∞–≥ 2 –∏–∑ 6: –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É —É—Ä–æ–∫–∞ –∏–ª–∏ —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è').",
        reply_markup=KeyboardManager.get_cancel_kb()
    )
    await States.next()

async def topic_handler(message: types.Message, state: FSMContext):
    text = GeminiAPI.sanitize_text(message.text)

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        user_accepted = bool(DatabaseManager.get_user(message.from_user.id))
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=KeyboardManager.get_main_kb(user_accepted))
        return

    await state.update_data(topic=text)
    await message.answer(
        "–®–∞–≥ 3 –∏–∑ 6: –£–∫–∞–∂–∏—Ç–µ –∫–ª–∞—Å—Å –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '7 –∫–ª–∞—Å—Å', '–ù–∞—á–∞–ª—å–Ω—ã–π').",
        reply_markup=KeyboardManager.get_cancel_kb()
    )
    await States.next()

async def grade_handler(message: types.Message, state: FSMContext):
    text = GeminiAPI.sanitize_text(message.text)

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.finish()
        user_accepted = bool(DatabaseManager.get_user(message.from_user.id))
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=KeyboardManager.get_main_kb(user_accepted))
        return

    await state.update_data(grade=text)
    await message.answer(
        "–®–∞–≥ 4 –∏–∑ 6: –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ.",
        reply_markup=KeyboardManager.get_count_kb()
    )
    await States.next()

async def count_selected(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    try:
        count = int(query.data.split(":", 1)[1])
        if count not in (5, 10, 15):
            await query.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.", show_alert=True)
            return

        await state.update_data(count=count)
        await bot.send_message(
            query.from_user.id,
            "–®–∞–≥ 5 –∏–∑ 6: –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=KeyboardManager.get_language_kb()
        )
        await States.next()

    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.", show_alert=True)

async def lang_selected(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    language = query.data.split(":", 1)[1]
    await state.update_data(language=language)

    await bot.send_message(
        query.from_user.id,
        "–®–∞–≥ 6 –∏–∑ 6: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∑–∞–∫—Ä—ã—Ç—ã–µ (—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤) –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ (—Ç—Ä–µ–±—É—é—â–∏–µ –ø–∏—Å—å–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞).",
        reply_markup=KeyboardManager.get_question_type_kb()
    )
    await States.next()

async def qtype_selected(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    qtype = query.data.split(":", 1)[1]
    await state.update_data(qtype=qtype)

    data = await state.get_data()
    summary = (
        "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞:</b>\n\n"
        f"‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç: <b>{data.get('subject', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
        f"‚Ä¢ –¢–µ–º–∞: <b>{data.get('topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
        f"‚Ä¢ –ö–ª–∞—Å—Å: <b>{data.get('grade', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{data.get('count', 5)}</b>\n"
        f"‚Ä¢ –Ø–∑—ã–∫: <b>{data.get('language', '–†—É—Å—Å–∫–∏–π')}</b>\n"
        f"‚Ä¢ –¢–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{'–û—Ç–∫—Ä—ã—Ç—ã–µ (–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç)' if qtype == 'open' else '–ó–∞–∫—Ä—ã—Ç—ã–µ (–≤–∞—Ä–∏–∞–Ω—Ç—ã a-d)'}</b>\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ. –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö."
    )

    confirm_kb = KeyboardManager.inline([
        ("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", "confirm_gen_cb"),
        ("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_cb")
    ])

    await bot.send_message(query.from_user.id, summary, reply_markup=confirm_kb)

async def confirm_gen(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    try:
        data = await state.get_data()
        subject = data.get("subject", "")
        topic = data.get("topic", "")
        grade = data.get("grade", "")
        language = data.get("language", "–†—É—Å—Å–∫–∏–π")
        count = int(data.get("count") or 5)
        qtype = data.get("qtype") or "closed"

        progress_msg = await bot.send_message(
            query.from_user.id,
            f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏... {ProgressManager.progress_bar(0)}"
        )

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 10,
            "üõ† –§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò-–º–æ–¥–µ–ª–∏...", "üöÄ"
        )

        tests, raw_response = await GeminiAPI.call_gemini(
            subject, topic, grade, language, count, qtype=qtype
        )

        if tests is None:
            await ProgressManager.safe_edit_progress(
                query.from_user.id, progress_msg.message_id, 0,
                "‚ùó –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –ò–ò.", "‚ùå"
            )

            error_snippet = raw_response if isinstance(raw_response, str) and len(raw_response) < 2000 else "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π"
            await bot.send_message(
                query.from_user.id,
                f"<b>–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–µ—Å—Ç–æ–≤.</b>\n\n–î–µ—Ç–∞–ª–∏: {error_snippet}"
            )

            await state.finish()
            user_accepted = bool(DatabaseManager.get_user(query.from_user.id))
            await bot.send_message(
                query.from_user.id,
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.",
                reply_markup=KeyboardManager.get_main_kb(user_accepted)
            )
            return

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 40,
            "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å...", "‚úÖ"
        )

        question_blocks = []
        answer_lines = []

        for idx, test in enumerate(tests, start=1):
            if qtype == "open":
                question_blocks.append(f"{idx}. {test['question']}")
                answer_lines.append(f"{idx}. {test.get('answer_text', '')}")
            else:
                question_blocks.append(f"{idx}. {test['question']}")
                options = test['options']
                question_blocks.append(f"   a) {options[0]}")
                question_blocks.append(f"   b) {options[1]}")
                question_blocks.append(f"   c) {options[2]}")
                question_blocks.append(f"   d) {options[3]}")
                question_blocks.append("")

                letters = ['a', 'b', 'c', 'd']
                answer_idx = test.get('answer', 1)
                answer_lines.append(f"{idx}. {letters[answer_idx-1]}")

        questions_text = "\n".join(question_blocks)
        answers_text = "üîë <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:</b>\n" + "\n".join(answer_lines)

        meta = {
            "subject": subject,
            "topic": topic,
            "grade": grade,
            "language": language,
            "user_id": query.from_user.id,
            "qtype": qtype
        }

        json_path = DatabaseManager.save_test(query.from_user.id, meta, tests)

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 60,
            "üíæ –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É...", "üíæ"
        )

        header_buf = ImageGenerator.make_header_image(
            f"{subject} ‚Ä¢ {topic}",
            f"–ö–ª–∞—Å—Å: {grade}",
            username=(query.from_user.username or str(query.from_user.id))
        )

        ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        base_name = os.path.splitext(json_path)[0]

        student_docx = base_name + "_student.docx"
        teacher_docx = base_name + "_teacher.docx"

        student_path = DocumentGenerator.create_docx_file(
            meta, tests, header_buf, student_docx, False, qtype
        )
        teacher_path = DocumentGenerator.create_docx_file(
            meta, tests, header_buf, teacher_docx, True, qtype
        )

        if student_path and teacher_path:
            user_exports[query.from_user.id] = {
                "json_path": json_path,
                "student_docx": student_path,
                "teacher_docx": teacher_path,
                "created_at": datetime.utcnow().isoformat()
            }
        else:
            user_exports.pop(query.from_user.id, None)
            await bot.send_message(
                query.from_user.id,
                "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã Word. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 80,
            "üì§ –§–æ—Ä–º–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...", "üì§"
        )

        if len(questions_text) <= 4000:
            await bot.send_message(
                query.from_user.id,
                "<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n" + questions_text,
                parse_mode="HTML"
            )
        else:
            txt_filename = os.path.join(DATA_DIR, f"questions_{query.from_user.id}_{ts}.txt")
            with open(txt_filename, "w", encoding="utf-8") as f:
                f.write(questions_text)

            with open(txt_filename, "rb") as f:
                await bot.send_document(
                    query.from_user.id,
                    InputFile(f, filename=f"–í–æ–ø—Ä–æ—Å—ã_{ts}.txt"),
                    caption="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª)"
                )
            os.remove(txt_filename)

        await bot.send_message(query.from_user.id, answers_text, parse_mode="HTML")

        if user_exports.get(query.from_user.id):
            export_kb = types.InlineKeyboardMarkup(row_width=1)
            export_kb.add(types.InlineKeyboardButton(
                "üìÑ –°–∫–∞—á–∞—Ç—å Word –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)",
                callback_data=f"export_word:{query.from_user.id}:student"
            ))
            export_kb.add(types.InlineKeyboardButton(
                "üìù –°–∫–∞—á–∞—Ç—å Word –¥–ª—è —É—á–∏—Ç–µ–ª—è (—Å –æ—Ç–≤–µ—Ç–∞–º–∏)",
                callback_data=f"export_word:{query.from_user.id}:teacher"
            ))

            await bot.send_message(
                query.from_user.id,
                "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Microsoft Word –≥–æ—Ç–æ–≤—ã. –°–∫–∞—á–∞–π—Ç–µ –∏—Ö –Ω–∏–∂–µ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=export_kb
            )

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 100,
            "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!", "üéâ"
        )

        user_accepted = bool(DatabaseManager.get_user(query.from_user.id))
        await bot.send_message(
            query.from_user.id,
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë —Ç–µ—Å—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é. –£–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–∫–∞—Ö! üìñ",
            reply_markup=KeyboardManager.get_main_kb(user_accepted)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 0,
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", "‚ùå"
        )
        await bot.send_message(
            query.from_user.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        await state.finish()

async def cb_export_word(query: types.CallbackQuery):
    await query.answer()

    try:
        parts = query.data.split(":")
        user_id = int(parts[1])
        mode = parts[2] if len(parts) > 2 else "student"

        if query.from_user.id != user_id:
            await query.answer("–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º.", show_alert=True)
            return

        export_info = user_exports.get(user_id)
        if not export_info:
            await query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.", show_alert=True)
            return

        file_key = "teacher_docx" if mode == "teacher" else "student_docx"
        file_path = export_info.get(file_key)

        if not file_path or not os.path.exists(file_path):
            await query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        with open(file_path, "rb") as f:
            caption = ("–î–æ–∫—É–º–µ–Ω—Ç Word –¥–ª—è —É—á–∏—Ç–µ–ª—è (—Å –æ—Ç–≤–µ—Ç–∞–º–∏)" if mode == "teacher"
                       else "–î–æ–∫—É–º–µ–Ω—Ç Word –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)")

            await bot.send_document(
                query.from_user.id,
                InputFile(f, filename=os.path.basename(file_path)),
                caption=caption
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ Word: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)