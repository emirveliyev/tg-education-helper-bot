from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext

import os
import asyncio
from datetime import datetime
import logging
from typing import List

from core.bot import bot, dp
from states.states import ModifyStates
from database.database_manager import DatabaseManager
from api.gemini_api import GeminiAPI
from api.image_generator import ImageGenerator
from api.document_generator import DocumentGenerator
from managers.keyboard_manager import KeyboardManager
from managers.progress_manager import ProgressManager
from utils.utils import modify_sessions
from config.config import DATA_DIR

logger = logging.getLogger("tg-edu-bot")


def register_modify_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(modify_start, lambda c: c.data == "modify_start_cb")
    dp.register_message_handler(modify_collect_q, state=ModifyStates.collecting)
    dp.register_message_handler(modify_collect_answers, state=ModifyStates.answers)
    dp.register_callback_query_handler(modify_choice_cb, lambda c: c.data and c.data.startswith("mod:"), state=ModifyStates.choose_mod)


async def modify_start(query: types.CallbackQuery):
    await query.answer()

    await bot.send_message(
        query.from_user.id,
        "‚úèÔ∏è –†–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. "
        "–ö–æ–≥–¥–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî '–û—Ç–º–µ–Ω–∞'.",
        reply_markup=KeyboardManager.get_cancel_kb()
    )

    modify_sessions[query.from_user.id] = {
        "questions": [],
        "answers": [],
        "meta": {"user_id": query.from_user.id}
    }

    await ModifyStates.collecting.set()


async def modify_collect_q(message: types.Message, state: FSMContext):
    text = GeminiAPI.sanitize_text(message.text)

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        modify_sessions.pop(message.from_user.id, None)
        await state.finish()
        user_accepted = bool(DatabaseManager.get_user(message.from_user.id))
        await message.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=KeyboardManager.get_main_kb(user_accepted))
        return

    if text.lower() == "–≥–æ—Ç–æ–≤–æ":
        session = modify_sessions.get(message.from_user.id)
        if not session or not session.get("questions"):
            await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.")
            return

        await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å."
        )
        session["answer_index"] = 0
        await ModifyStates.answers.set()
        return

    session = modify_sessions.get(message.from_user.id)
    if session is None:
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.finish()
        return

    session["questions"].append(text)
    await message.answer(
        f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(session['questions'])}. "
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ì–æ—Ç–æ–≤–æ'."
    )


async def modify_collect_answers(message: types.Message, state: FSMContext):
    text = GeminiAPI.sanitize_text(message.text)

    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        modify_sessions.pop(message.from_user.id, None)
        await state.finish()
        user_accepted = bool(DatabaseManager.get_user(message.from_user.id))
        await message.answer("–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=KeyboardManager.get_main_kb(user_accepted))
        return

    session = modify_sessions.get(message.from_user.id)
    if session is None:
        await state.finish()
        await message.answer("–°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    idx = session.get("answer_index", 0)
    session["answers"].append(text)
    idx += 1
    session["answer_index"] = idx

    if idx < len(session["questions"]):
        await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ ‚Ññ{idx + 1}:")
        return

    mod_kb = types.InlineKeyboardMarkup(row_width=1)
    mod_kb.add(types.InlineKeyboardButton(
        "üîÑ –ü–æ–º–µ–Ω—è—Ç—å —Ç–µ–º—É (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É)",
        callback_data="mod:change_topic"
    ))
    mod_kb.add(types.InlineKeyboardButton(
        "üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ/—á–∏—Å–ª–∞",
        callback_data="mod:change_variables"
    ))
    mod_kb.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cb"))

    await message.answer("–í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:", reply_markup=mod_kb)
    await ModifyStates.choose_mod.set()


async def modify_choice_cb(query: types.CallbackQuery, state: FSMContext):
    await query.answer()

    choice = query.data.split(":", 1)[1]
    session = modify_sessions.get(query.from_user.id)

    if not session:
        await bot.send_message(query.from_user.id, "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.finish()
        return

    progress_msg = await bot.send_message(
        query.from_user.id,
        f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã... {ProgressManager.progress_bar(0)}"
    )

    try:
        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 20,
            "üõ† –§–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–æ–≤...", "üöÄ"
        )

        context_examples = []
        for q, a in zip(session["questions"], session["answers"]):
            context_examples.append({"question": q, "answer": a})

        subject = session.get("meta", {}).get("subject", "–û–±—â–∏–π")
        topic = session.get("meta", {}).get("topic", "–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        grade = session.get("meta", {}).get("grade", "")
        language = "–†—É—Å—Å–∫–∏–π"
        num_questions = len(session["questions"])

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 40,
            "üì° –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini AI...", "üöÄ"
        )

        tests, raw_response = await GeminiAPI.call_gemini(
            subject, topic, grade, language, num_questions,
            qtype="open", context_examples=context_examples,
            modify_mode=choice
        )

        if tests is None:
            await ProgressManager.safe_edit_progress(
                query.from_user.id, progress_msg.message_id, 100,
                "‚ùó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.", "‚ùå"
            )
            await bot.send_message(
                query.from_user.id,
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
            )
            await state.finish()
            modify_sessions.pop(query.from_user.id, None)
            return

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 60,
            "üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã...", "‚úÖ"
        )

        meta = {
            "subject": subject,
            "topic": f"{topic} (–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ)",
            "grade": grade,
            "language": language,
            "user_id": query.from_user.id
        }

        # –°–æ–∑–¥–∞–Ω–∏–µ header –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ —Ç—è–∂—ë–ª–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        try:
            header_buf = await asyncio.to_thread(
                ImageGenerator.make_header_image,
                "–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
                f"–†–µ–∂–∏–º: {'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã' if choice == 'change_topic' else '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'}",
                username=(query.from_user.username or str(query.from_user.id))
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ header image: %s", e)
            header_buf = None

        ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
        safe_out_dir = os.path.abspath(DATA_DIR)
        os.makedirs(safe_out_dir, exist_ok=True)
        base_name = os.path.join(safe_out_dir, f"modified_{query.from_user.id}_{ts}")

        student_docx = base_name + "_student.docx"
        teacher_docx = base_name + "_teacher.docx"

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
        try:
            student_res = await asyncio.to_thread(
                DocumentGenerator.create_docx_file,
                meta, tests, header_buf, student_docx, False, "open"
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ student doc: %s", e)
            student_res = False

        try:
            teacher_res = await asyncio.to_thread(
                DocumentGenerator.create_docx_file,
                meta, tests, header_buf, teacher_docx, True, "open"
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ teacher doc: %s", e)
            teacher_res = False

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: DocumentGenerator –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Ç—å –∏–ª–∏ True/False
        def _resolve_path(result, expected_path):
            if isinstance(result, str) and result:
                return result
            if result is True:
                return expected_path
            if result:
                return expected_path
            return None

        student_path = _resolve_path(student_res, student_docx)
        teacher_path = _resolve_path(teacher_res, teacher_docx)

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 80,
            "üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...", "üì§"
        )

        if student_path and os.path.exists(student_path) and teacher_path and os.path.exists(teacher_path):
            try:
                with open(student_path, "rb") as f:
                    await bot.send_document(
                        query.from_user.id,
                        types.InputFile(f, filename=os.path.basename(student_path)),
                        caption="üìÑ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)"
                    )
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ student doc: %s", e)
                await bot.send_message(query.from_user.id, "–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ.")

            try:
                with open(teacher_path, "rb") as f:
                    await bot.send_document(
                        query.from_user.id,
                        types.InputFile(f, filename=os.path.basename(teacher_path)),
                        caption="üìù –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è (—Å –æ—Ç–≤–µ—Ç–∞–º–∏)"
                    )
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ teacher doc: %s", e)
                await bot.send_message(query.from_user.id, "–î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É—á–∏—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ.")
        else:
            logger.error("–û–¥–∏–Ω –∏–ª–∏ –æ–±–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã: student=%s teacher=%s", student_path, teacher_path)
            await bot.send_message(query.from_user.id, "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        await ProgressManager.safe_edit_progress(
            query.from_user.id, progress_msg.message_id, 100,
            "‚úÖ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "üéâ"
        )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: %s", e)
        try:
            await ProgressManager.safe_edit_progress(
                query.from_user.id, progress_msg.message_id, 0,
                "‚ùó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.", "‚ùå"
            )
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ.")
        await bot.send_message(query.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
    finally:
        try:
            await state.finish()
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.")
        modify_sessions.pop(query.from_user.id, None)