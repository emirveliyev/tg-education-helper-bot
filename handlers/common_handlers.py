from datetime import datetime
import logging

from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.bot import bot, dp
from database.database_manager import DatabaseManager
from managers.keyboard_manager import KeyboardManager
from utils.utils import pending_contacts, safe_state_transaction
from config.config import ADMIN

logger = logging.getLogger(__name__)

def register_common_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(cb_help, lambda c: c.data == "help_cb")
    dp.register_callback_query_handler(cb_request_contact, lambda c: c.data == "request_contact_cb")
    dp.register_message_handler(contact_handler, content_types=types.ContentType.CONTACT)
    dp.register_callback_query_handler(cb_accept_privacy, lambda c: c.data and c.data.startswith("accept_privacy:"))
    dp.register_callback_query_handler(cb_decline_privacy, lambda c: c.data and c.data.startswith("decline_privacy:"))
    dp.register_callback_query_handler(cb_cancel, lambda c: c.data == "cancel_cb", state="*")
    dp.register_message_handler(fallback_handler)

async def cmd_start(message: types.Message):
    try:
        user = DatabaseManager.get_user(message.from_user.id)
        accepted = bool(user and user.get("accepted"))
        greeting = (
            f"üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name or message.from_user.username or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!</b>\n\n"
            "–Ø ‚Äî —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π –∏ —É—á–µ–Ω–∏–∫–æ–≤. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ –ª—é–±–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∏ —Ç–µ–º–µ.\n"
            "‚Ä¢ –ò—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word.\n"
            "‚Ä¢ –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –°–û–†/–°–û–ß), –∏–∑–º–µ–Ω—è—è —Ç–µ–º—É –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ª–æ–≥–∏–∫—É.\n\n"
            "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –ø–æ–¥–µ–ª–∏–≤—à–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ!"
        )
        kb = KeyboardManager.get_main_kb(accepted)
        await message.answer(greeting, reply_markup=kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cb_help(query: types.CallbackQuery):
    await query.answer()
    try:
        text = (
            "üìö <b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –í–æ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:\n\n"
            "1. <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤ [–ü–û–ü–£–õ–Ø–†–ù–û]</b>:\n"
            "   - –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ–º—É, –∫–ª–∞—Å—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —è–∑—ã–∫ –∏ —Ç–∏–ø (–∑–∞–∫—Ä—ã—Ç—ã–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ).\n"
            "   - –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç —Ç–µ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∏—Ö –≤ —á–∞—Ç–µ –∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word (–¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è —É—á–∏—Ç–µ–ª—è).\n"
            "   - –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è: –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç, –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π, –≤–∏–∫—Ç–æ—Ä–∏–Ω.\n\n"
            "2. <b>–ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏ [–ë–ï–¢–ê –í–ï–†–°–ò–Ø]</b>:\n"
            "   - –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚Äî –±–æ—Ç –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é —Å—Ç–∞—Ç—å—é, –∏–∑–≤–ª–µ—á–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n"
            "   - –ü–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç Word —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —É—Ä–æ–∫–æ–≤ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π.\n"
            "   - –°–æ–≤–µ—Ç: –£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n\n"
            "3. <b>–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ [–ë–ï–¢–ê –í–ï–†–°–ò–Ø]</b>:\n"
            "   - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.\n"
            "   - –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è) –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∏–∑–º–µ–Ω–∏—Ç—å —á–∏—Å–ª–∞).\n"
            "   - –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ Word ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ø–ª–∞–≥–∏–∞—Ç–∞.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º! üöÄ"
        )
        user = DatabaseManager.get_user(query.from_user.id)
        user_accepted = bool(user and user.get("accepted"))
        await bot.send_message(query.from_user.id, text, reply_markup=KeyboardManager.get_main_kb(user_accepted))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ cb_help")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def cb_request_contact(query: types.CallbackQuery):
    await query.answer()
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(types.KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True))
        await bot.send_message(
            query.from_user.id,
            "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            reply_markup=kb
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ cb_request_contact")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def contact_handler(message: types.Message):
    try:
        contact = message.contact
        if not contact:
            await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            return
        if contact.user_id != message.from_user.id:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.")
            return
        pending_contacts[message.from_user.id] = {
            "phone": contact.phone_number,
            "username": message.from_user.username or "",
            "created_at": datetime.utcnow().isoformat()
        }
        privacy_text = (
            "üìú <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n"
            "–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º, "
            "–∏—Å—Ç–æ—Ä–∏–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö —Ç–æ–ª—å–∫–æ "
            "–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –æ–±—Ä–∞—Ç–∏–≤—à–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            "–ü—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è?"
        )
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data=f"accept_privacy:{message.from_user.id}"))
        kb.add(InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_privacy:{message.from_user.id}"))
        await message.answer(privacy_text, reply_markup=kb)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def cb_accept_privacy(query: types.CallbackQuery):
    await query.answer()
    try:
        uid = int(query.data.split(":", 1)[1])
        if uid != query.from_user.id:
            await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return
        pending = pending_contacts.get(uid)
        if not pending:
            await query.answer("–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            return
        DatabaseManager.add_or_update_user(
            uid,
            pending.get("username", ""),
            pending.get("phone", ""),
            accepted=True
        )
        pending_contacts.pop(uid, None)
        await bot.send_message(
            uid,
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –∏–º–µ–µ—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç–æ–≤.",
            reply_markup=KeyboardManager.get_main_kb(True)
        )
    except ValueError:
        await query.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def cb_decline_privacy(query: types.CallbackQuery):
    await query.answer()
    try:
        uid = int(query.data.split(":", 1)[1])
        if uid != query.from_user.id:
            await query.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å.", show_alert=True)
            return
        pending_contacts.pop(uid, None)
        await bot.send_message(
            uid,
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=KeyboardManager.get_main_kb(False)
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏")

async def cb_cancel(query: types.CallbackQuery, state: FSMContext):
    await query.answer()
    try:
        async with safe_state_transaction(state):
            await state.finish()
            user = DatabaseManager.get_user(query.from_user.id)
            user_accepted = bool(user and user.get("accepted"))
            await bot.send_message(
                query.from_user.id,
                "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=KeyboardManager.get_main_kb(user_accepted)
            )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def fallback_handler(message: types.Message):
    try:
        user = DatabaseManager.get_user(message.from_user.id)
        user_accepted = bool(user and user.get("accepted"))
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=KeyboardManager.get_main_kb(user_accepted)
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ fallback_handler")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")